[pytest]
# pytest has become too feature ladened to use without extensive study.

# The -p no:logging switch is needed or pytest will quietly and automatically
# re-route your log files (this cost me many hours)

# The --ignore=examples switch is needed or it will recurse into the examples
# directory and run the test files there
addopts=-p no:logging --ignore=examples

# This part of the file is required to remove nonsensical warnings about markers
# (a feature added by someone with a puritanical mindset).
markers = 
  stop: test if we can kill an individual activeobject
  stop_fabric: test if we can the active fabric and all attached activeobject
  hsm: test the hsm
  init: test the hsm init method
  dispatch: test the hsm dispatch method
  rtc: test the run to completion event
  complete_circuit: test the complete_circuit method
  event: test the events
  post_event: test the post_event method
  post_add: can we augment a statechart once it is made?
  is_in: test the is_in active object feature
  pubsub: test the publish and subscribe feature of the activate object
  recall: test the activate object's recall feature
  defer: test the activate object's defer feature
  tazor: test the tazor example
  strip: test ability to strip a trace of its datetimestamp information
  spy: test the spy instrumentation features
  scribble: confirm you can write information into the spy instrumentation stream
  trace: test the trace instrumentation features
  no_live_trace: test the ability turn off the live trace
  no_live_spy: does no live_spy work?
  live_trace: does live_trace work?
  live_spy: does live_spy work?
  no_spy_on_decorator: test the "is there no spy decorator" feature
  instrumented: test the "instrumented" feature
  postings: test the ability to post events
  locking_deque: test a fusion of a deque and a Queue
  internalspy: ?
  fhsm: test the library's ability to make finite statemachines
  example: run tests marked example
  not_instrumented: confirm we check if the activeobject is instrumented
  no_spy_on_decortator: confirm we can see if a spy_on dectorator has been added
  spy_on_decortator: confirm we can see if a spy_on dectorator has been added
  encryption: moot encryption test
  pad: a crypto related test (not used in this library anymore)
  child_state: test the child state features
  spy_decorator: test the spy decorator feature
  intrumented: test the instrumented feature
  factory: does the factory work?
  post_add: test the post add feature
  spy_on_decorator: ?
  here: a run a single test
  ao: confirm the activeobject is working
  aos: confirm the activeobject is working
  topology_g: test topology g
  topology_a: test topology a
  topology_b: test topology b
  topology_c: test topology c
  topology_d: test topology d
  topology_e: test topology e
  topology_f: test topology f
  topology_g: test topology g
  topology_h: test topology h
  comprehensive: run the full topological comprehensive test with and without instrumentation
  test_group_1: collection of tests, see comprehensive_hsm_test.py for table
  test_group_2: collection of tests, see comprehensive_hsm_test.py for table 
  test_group_3: collection of tests, see comprehensive_hsm_test.py for table 
  test_group_4: collection of tests, see comprehensive_hsm_test.py for table 
  test_group_5: collection of tests, see comprehensive_hsm_test.py for table 
  test_group_6: collection of tests, see comprehensive_hsm_test.py for table 
  test_group_7: collection of tests, see comprehensive_hsm_test.py for table 
  test_group_8: collection of tests, see comprehensive_hsm_test.py for table 
  test_group_9: collection of tests, see comprehensive_hsm_test.py for table 
  test_group_10: collection of tests, see comprehensive_hsm_test.py for table 
  test_group_11: collection of tests, see comprehensive_hsm_test.py for table 
  test_group_12: collection of tests, see comprehensive_hsm_test.py for table 
  test_group_13: collection of tests, see comprehensive_hsm_test.py for table 
  test_group_14: collection of tests, see comprehensive_hsm_test.py for table 
  test_group_15: collection of tests, see comprehensive_hsm_test.py for table 
  test_group_16: collection of tests, see comprehensive_hsm_test.py for table 
  thread_safe_attributes: test thread safe attributes provided by the MetaThreadSafeAttributes
  isolated: for debugging specific tests
  scxml_bugs: bugs found while building miros-scxml

