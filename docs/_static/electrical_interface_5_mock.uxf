<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>9</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>342</x>
      <y>90</y>
      <w>198</w>
      <h>225</h>
    </coordinates>
    <panel_attributes>*ElectricalInterfaceMock*
--
_driving_terminal_amps
_driving_terminal_volts
_control
pulse_sec
--
drive_current(current, control)
drive_voltage(voltage, control)
sample_current()
sample_voltage()
write_data_to_csv()
layer=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>720</x>
      <y>477</y>
      <w>468</w>
      <h>306</h>
    </coordinates>
    <panel_attributes>*drive_current_state*
--
entry /
  _datetime = datetime.now()
  real_seconds_since_start = (_datetime - self.start_datetime).total_seconds()
  fake_seconds_since_start = real_seconds_since_start * self.time_compression_scalar
  new_datetime = self.start_datetime + timedelta(seconds=fake_seconds_since_start)
  
  self.battery.amps_through_terminals(
    self._driving_terminal_amps, 
    moment=new_datetime
  )
  self.write_data_to_csv()

Tick as e /
  new_datetime = self.start_datetime + timedelta(secconds=e.payload.sec)

  self.battery.amps_to_terminal(
    self._driving_terminal_amps, 
    moment=new_datetime
  )
  self.write_data_to_csv()
    
valign=top
layer=2

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>882</x>
      <y>396</y>
      <w>351</w>
      <h>99</h>
    </coordinates>
    <panel_attributes>
lt=-&gt;
layer=3</panel_attributes>
    <additional_attributes>370.0;20.0;10.0;20.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>351</x>
      <y>252</y>
      <w>180</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>respond_to_control_changes
symbol=substate
layer=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>495</x>
      <y>225</y>
      <w>27</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=()-[v]
layer=3</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>900</x>
      <y>423</y>
      <w>225</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>DriveCurrent = namedtuple(
  'DriveCurrent', ['amps', 'control', 'sec'])
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>387</x>
      <y>936</y>
      <w>216</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>DriveVoltage = namedtuple(
  'DriveVoltage', ['volts', 'control', 'sec'])
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>324</x>
      <y>558</y>
      <w>18</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>
bg=green
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>342</x>
      <y>0</y>
      <w>99</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>LoggedBehavior
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>378</x>
      <y>18</y>
      <w>27</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
layer=3
fg=black</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>432</x>
      <y>0</y>
      <w>45</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
layer=3</panel_attributes>
    <additional_attributes>30.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>459</x>
      <y>0</y>
      <w>81</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>Factory</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>630</x>
      <y>414</y>
      <w>144</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>Sampler = namedtuple(
  'Sampler', ['fn'])
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>324</x>
      <y>360</y>
      <w>18</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>
bg=red
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>324</x>
      <y>423</y>
      <w>18</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>
bg=red
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>585</x>
      <y>1125</y>
      <w>351</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>REQUEST_FOR_SAMPLERS
lt=-&gt;
layer=3</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0;370.0;50.0;370.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>567</x>
      <y>99</y>
      <w>261</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>For Testing:
Sample simulator here

def sample_current(self):
  return self.battery.last_current_amps

def sample_voltage(self):
  return self.battery.last_terminal_volts

layer=3
fg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>441</x>
      <y>189</y>
      <w>144</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>lt=.
layer=3</panel_attributes>
    <additional_attributes>10.0;10.0;140.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>891</x>
      <y>360</y>
      <w>270</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>DRIVE_CURRENT as e / 
  self._driving_terminal_volts = None
  self._driving_terminal_amps = e.payload.amps
  self._control = e.payload.control
style=wordwrap
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>342</x>
      <y>45</y>
      <w>153</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>ElectricalInterface</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>405</x>
      <y>63</y>
      <w>27</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
layer=3</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>342</x>
      <y>333</y>
      <w>873</w>
      <h>801</h>
    </coordinates>
    <panel_attributes>*respond_to_control_changes*
--
entry /
  self.publish(
    Event(signal=signals.SET_CURRENT_SAMPLER
      payload=Sampler(fn=partial(self.sample_current)))
    
  self.publish(
    Event(signal=signals.SET_VOLTAGE_SAMPLER
      payload=Sampler(fn=partial(self.sample_voltage)))

  self.subscribe(Event(signal=signals.REQUEST_FOR_SAMPLERS))
  self.subscribe(Event(signal=signals.DRIVE_CURRENT))
  self.subscribe(Event(signal=signals.DRIVE_VOLTAGE))

  self.post_fifo(
    Event(
      signal=signals.Pulse,
      period= self.pulse_sec / self.time_compression_scalar,
      deferred=True,
      times=0
    )
  )
  self.real_seconds = 0
  self.fake_seconds = 0
  self.start_datetime = datetime.now()


Pulse /
  self.real_seconds += self.pulse_sec / self.time_compression_scalar
  self.fake_seconds += self.pulse_sec
  self.post_fifo(
    Event(signal=signals.Tick
      payload=SecInCharge(sec=self.fake_seconds)
  )
  
valign=top
layer=2

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>387</x>
      <y>801</y>
      <w>171</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>SecInCharge = namedtuple(
  'SecInCharge', ['sec'])
layer=3
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1116</x>
      <y>279</y>
      <w>99</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>BatterySimulator
fg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1161</x>
      <y>297</y>
      <w>27</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
fg=blue</panel_attributes>
    <additional_attributes>10.0;40.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>720</x>
      <y>801</y>
      <w>468</w>
      <h>315</h>
    </coordinates>
    <panel_attributes>*drive_voltage_state*
--
entry /
  _datetime = datetime.now()
  real_seconds_since_start = (_datetime - self.start_datetime).total_seconds()
  fake_seconds_since_start = real_seconds_since_start * self.time_compression_scalar
  new_datetime = self.start_datetime + timedelta(seconds=fake_seconds_since_start)
  
  self.battery.volts_to_terminals(
    self._driving_terminal_volts, 
    moment=new_datetime
  )
  self.write_data_to_csv()

Tick as e /
  new_datetime = self.start_datetime + timedelta(secconds=e.payload.sec)

  self.battery.volts_across_terminal(
    self._driving_terminal_volts, 
    moment=new_datetime
  )
  self.write_data_to_csv()
    
valign=top
layer=2

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>333</x>
      <y>909</y>
      <w>405</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>
lt=-&gt;
layer=3</panel_attributes>
    <additional_attributes>10.0;20.0;430.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>387</x>
      <y>873</y>
      <w>270</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>DRIVE_VOLTAGE as e / 
  self._driving_terminal_volts = None
  self._driving_terminal_amps = e.payload.amps
  self._control = e.payload.control
style=wordwrap
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>396</x>
      <y>1125</y>
      <w>54</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>Stop
lt=-&gt;
layer=3</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLSpecialState</id>
    <coordinates>
      <x>396</x>
      <y>1197</y>
      <w>18</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>type=termination
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
