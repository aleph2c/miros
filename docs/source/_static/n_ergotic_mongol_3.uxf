<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>11</zoom_level>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>11</x>
      <y>0</y>
      <w>1661</w>
      <h>1980</h>
    </coordinates>
    <panel_attributes>*deceit_in_detail*
--
entry / 
  # load up on arrows and start tracking time within this tactic
  archer.arrows = HorseArcher.MAXIMUM_ARROW_CAPACITY
  archer.ticks = 0
  archer.post_fifo(Event(signal=signals.Second, times=0, period=archer.to_time(1.0), deferred=True)
  
second / archer.ticks += 1

Senior_Advance_War_Cry / archer.post_fifo(Event(signal=signals.Advance_War_Cry))
Senior_Skirmish_War_Cry / archer.post_fifo(Event(signal=signals.Skirmish_War_Cry))
Senior_Retreat_War_Cry / archer.post_fifo(Event(signal=signals.Retreat_War_Cry))

Other_Ready as e / archer.dispatch_to_empath(e)
Other_Retreat_Ready as e / archer.dispatch_to_empathy(e)

exit / archer.cancel_event(Event(signal=signals.Second))

valign=top

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>836</x>
      <y>88</y>
      <w>792</w>
      <h>1100</h>
    </coordinates>
    <panel_attributes>*skirmish*
--
entry /
  archer.yell(
    Event(signal=signals.Other_Skirmish_War_Cry,
      payload=archer.name))
  archer.post_fifo(
    Event(signal=signals.Officer_Lured),
    times=1,
    period=archer.to_time(
      random.randint(40, 200)),
    deferred=True)
  if archer.arrow &lt; 10:
    archer.post_fifo(Event(signal=signals.Ammunition_Low))
Officer_Lured /
  chart.post_fifo(Retreat_War_Cry)
Senior_Skirmish_War_Cry / {}
Other_Skirmish_War_Cry as e / archer.dispatch_to_empathy(e)
Skirmish_War_Cry as e /  archer.dispatch_to_all_empathy(e)

second /
  if archer.tick % 3 == 0:
    if random.randint(1, 10) &lt;= 4:
      archer.arrow = archer.arrow - 1 if archer.arrows &gt;= 1 else 0
    if archer.arrows &lt; 10:
      archer.post_fifo(
      Event(
        signal=signals.Ammunition_Low))
  archer.ticks += 1  

exit /
  archer.cancel_events(Event(signal=signals.Retreat_War_Cry))
  archer.cancel_events(Event(signal=signals.Officer_Lured))
valign=top

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>297</x>
      <y>319</y>
      <w>484</w>
      <h>638</h>
    </coordinates>
    <panel_attributes>*advance*
--
entry /
  archer.yell(Event(signal=signals.Other_Advance_War_Cry,
    payload=archer.name))
  # othogonoal component debug code here
  chart.post_fifo(
    Event(signal=signals.Close_Enough_for_Circle),
      times=1,
      period=archer.to_time(3.0),
      deferred=True)
      
exit/ archer.cancel_events(
  Event(signal=signals.Close_Enough_for_Circle))
  
Senior_Advance_War_Cry / {}
Other_Advance_War_Cry as e / archer.dispatch_to_empthy(e)
Advance_War_Cry as e / archer.dispatch_to_all_empathy(e)

valign=top

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>1199</x>
      <y>671</y>
      <w>407</w>
      <h>484</h>
    </coordinates>
    <panel_attributes>*waiting_to_lure*
--
entry /
  archer.yell(
    Event(signal=signals.Other_Retreat_Ready_War_Cry,
          payload=archer.name))
  archer.snoop_scribble('{} has {} arrows'. \
    format(archer.name, archer.arrows))
  archer.scribble('put away bow')
  archer.scribble('pull scimitar')
  archer.snoop_scribble('{} acts scared'. \
    format(archer.name))

Ammunition_Low / {}

exit /
  archer.scribble('stash scimitar')
  archer.scribble('pull bow')
  archer.scribble('stop acting')
  
second /
  archer.ticks += 1
  
exit /
  archer.scribble('stash scimitar')
  archer.scribble('pull bow')
  archer.scribble('stop acting')

  


valign=top

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>946</x>
      <y>1320</y>
      <w>451</w>
      <h>429</h>
    </coordinates>
    <panel_attributes>*feigned_retreat*
--
entry / 
  archer.yell(Event(signal=
    signals.Other_Retreat_War_Cry, payload=archer.name))
  archer.scribble('fire on Knights')
  archer.scribble('fire on footman')
  if archer.arrows == 0
    archer.post_fifo(Event(signal=signals.Out_Of_Arrows))
      
second /
  if archer.tick % 3 == 0:
    if random.randint(1, 10) &lt;= 8:
    archer.arrow -= 1
    if archer.arrows == 0:
      archer.post_fifo(Event(signal=signals.Out_Of_Arrows))
  archer.ticks += 1          

Retreat_War_Cry / {}
Other_Retreat_War_Cry / {}

exit /
  archer.cancel_events(Event(signal=signals.Out_Of_Arrows))
  archer.scribble("full gallop")
valign=top
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>0</x>
      <y>605</y>
      <w>319</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>lt=-&gt;


bg=blue
fg=black</panel_attributes>
    <additional_attributes>10.0;20.0;270.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>825</x>
      <y>759</y>
      <w>396</w>
      <h>44</h>
    </coordinates>
    <panel_attributes>lt=-&gt;

fg=black</panel_attributes>
    <additional_attributes>10.0;20.0;340.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLSpecialState</id>
    <coordinates>
      <x>143</x>
      <y>891</y>
      <w>22</w>
      <h>22</h>
    </coordinates>
    <panel_attributes>type=initial
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>143</x>
      <y>891</y>
      <w>176</w>
      <h>33</h>
    </coordinates>
    <panel_attributes>lt=-&gt;
fg=black</panel_attributes>
    <additional_attributes>10.0;10.0;140.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>836</x>
      <y>715</y>
      <w>352</w>
      <h>99</h>
    </coordinates>
    <panel_attributes>Ammunition_Low / 
 chart.post_fifo(
  Event(signal=signals.Retreat_Ready_War_Cry))
style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1386</x>
      <y>1452</y>
      <w>308</w>
      <h>44</h>
    </coordinates>
    <panel_attributes>lt=-&gt;

bg=black
fg=black</panel_attributes>
    <additional_attributes>260.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>33</x>
      <y>1056</y>
      <w>759</w>
      <h>891</h>
    </coordinates>
    <panel_attributes>*marshal*
--
entry / 
  archer.scribble("halt horse")
  archer.scribble("identify next marshal point")
  archer.scribble("field wrap wounds on self and horse")
  archer.scribble("drink water")
  archer.arrows = HorseArcher.MAXIMUM_ARROW_CAPACITY
  chart.post_fifo(
    Event(signal=signals.READY),
      times=1,
      period=archer.to_time(60),
      deferred=True)

valign=top

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>781</x>
      <y>1496</y>
      <w>187</w>
      <h>44</h>
    </coordinates>
    <panel_attributes>lt=-&gt;
Out_Of_Arrows
fg=black</panel_attributes>
    <additional_attributes>150.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>341</x>
      <y>649</y>
      <w>418</w>
      <h>231</h>
    </coordinates>
    <panel_attributes>*circle_and_fire*
--
   
second /
  if archer.ticks % 6 == 0:
    archer.arrow -= random.randint(1,3)
    archer.arrows = 0 if archer.arrows &lt; 0 else archer.arrows
    if archer.arrows &lt; 20:
      archer.post_fifo(
      Event(signal=signals.Skirmish_War_Cry))
  archer.ticks += 1  
valign=top

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>418</x>
      <y>869</y>
      <w>308</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=-&gt;
Close_Enough_For_Circle
fg=black</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;40.0;260.0;40.0;260.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>825</x>
      <y>880</y>
      <w>396</w>
      <h>297</h>
    </coordinates>
    <panel_attributes>lt=-&gt;


fg=black</panel_attributes>
    <additional_attributes>10.0;250.0;320.0;250.0;320.0;10.0;340.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>352</x>
      <y>1210</y>
      <w>407</w>
      <h>715</h>
    </coordinates>
    <panel_attributes>*waiting_to_advance*
--
entry /
  archer.yell(Event(
    signal=signals.Other_Ready_War_Cry,
    payload=archer.name))

  ready = True
  archer.snoop_scribbel("{} has {} arrows". \
    format(archer.name, archer.arrows)
  time_to_wait = random.randint(130,300)
  
  for name, other in archer.others.items():
    if other.dead() is not True:
      ready &amp;= other.waiting()
    else:
      archer.snoop_scribble(
        "{} thinks {} is dead".
        format(archer.name, name)
  if ready is False:      
    archer.snoop_scribble(
      "{} is impatient he will attack in {} seconds".
      format(archer.name, time_to_wait)
    archer.post_fifo(
      Event(
        signal=signals.Advance_War_Cry),
      times=1,
      period=random.randint(time_to_wait),
      deferred=True)
  else:
    archer.snoop_scribble(
      "{} thinks unit is ready to attack". \
      format(archer.name))
    archer.post_fifo(
      Event(signal=signals.Advance_War_Cry))
  
exit /
  archer.cancel_events(
    Event(signal=signals.Advance_War_Cry))
  

valign=top

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>22</x>
      <y>1298</y>
      <w>352</w>
      <h>231</h>
    </coordinates>
    <panel_attributes>lt=-&gt;


bg=blue
fg=black</panel_attributes>
    <additional_attributes>10.0;190.0;280.0;190.0;280.0;10.0;300.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1232</x>
      <y>1177</y>
      <w>462</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=-&gt;


fg=black</panel_attributes>
    <additional_attributes>400.0;70.0;10.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>11</x>
      <y>572</y>
      <w>275</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>Advance_War_Cry as e /
  archer.dispatch_to_all_empathy(e)

style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>1243</x>
      <y>1221</y>
      <w>242</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>Skirmish_War_Cry 
style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>1397</x>
      <y>1419</y>
      <w>275</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>Retreat_War_Cry as e /
  archer.dispatch_to_all_empathy(e)
  
style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>836</x>
      <y>792</y>
      <w>352</w>
      <h>363</h>
    </coordinates>
    <panel_attributes>Retreat_Ready_War_Cry /
  ready = True
  for name, other archer.others.items():
    if other.dead() is not True:
      ready &amp;= other.waiting()
    else:
      archer.snoop_scribble(
        "{} thinks {} is dead".
        format(archer.name, name))
  if ready:
    # let's make sure the archer isn't a chicken
    delay_time = random.randint(10,50)
  else:
    delay_time = random.randint(30,60)
  archer.post_fifo(
    Event(signal=signals.Retreat_War_Cry),
    times=1,
    period=archer.to_time(
      delay_time),
    deferred=True)

style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>154</x>
      <y>1474</y>
      <w>66</w>
      <h>33</h>
    </coordinates>
    <panel_attributes>Ready
  
style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>1243</x>
      <y>264</y>
      <w>385</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>Officer_Lured /
  archer.snoop_scribble("Knight Charging")
  archer.post_fifo(
    Event(signal=signals.Retreate_Ready_War_Cry))
style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1298</x>
      <y>341</y>
      <w>352</w>
      <h>352</h>
    </coordinates>
    <panel_attributes>lt=-&gt;

fg=black</panel_attributes>
    <additional_attributes>300.0;10.0;10.0;10.0;10.0;210.0;110.0;210.0;110.0;300.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>1397</x>
      <y>1529</y>
      <w>275</w>
      <h>99</h>
    </coordinates>
    <panel_attributes>Other_Retreat_War_Cry as e /
  archer.post_fifo(
    Event(
      signal=signals.Retreat_War_Cry))
  archer.dispatch_to_empathy(e)

style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1386</x>
      <y>1606</y>
      <w>308</w>
      <h>44</h>
    </coordinates>
    <panel_attributes>lt=-&gt;

fg=black</panel_attributes>
    <additional_attributes>260.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>946</x>
      <y>1177</y>
      <w>748</w>
      <h>143</h>
    </coordinates>
    <panel_attributes>lt=-&gt;


fg=black</panel_attributes>
    <additional_attributes>660.0;100.0;10.0;100.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>957</x>
      <y>1243</y>
      <w>275</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>Other_Skirmish_War_Cry as e \
  archer.dispatch_to_empathy(e)
  
style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>11</x>
      <y>660</y>
      <w>275</w>
      <h>154</h>
    </coordinates>
    <panel_attributes>Other_Advance_War_Cry as e /
  archer.post_fifo(
    Event(
      signal=signals.Advance_War_Cry))
  archer.dispatch_to_empathy(e)
style=wordwrap
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>0</x>
      <y>748</y>
      <w>319</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>lt=-&gt;

  

bg=blue
fg=black</panel_attributes>
    <additional_attributes>10.0;20.0;270.0;20.0</additional_attributes>
  </element>
</diagram>
