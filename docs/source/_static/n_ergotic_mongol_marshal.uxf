<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>280</x>
      <y>110</y>
      <w>620</w>
      <h>810</h>
    </coordinates>
    <panel_attributes>*marshal*
--
entry / 
  archer.scribble("halt horse")
  archer.scribble("identify next marshal point")
  archer.scribble("field wrap wounds on self and horse")
  archer.scribble("drink water")
  archer.arrows = HorseArcher.MAXIMUM_ARROW_CAPACITY
  chart.post_fifo(
    Event(signal=signals.READY),
      times=1,
      period=archer.to_time(60),
      deferred=True)

valign=top

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>270</x>
      <y>330</y>
      <w>250</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>lt=-&gt;
bg=blue
fg=black</panel_attributes>
    <additional_attributes>10.0;190.0;210.0;190.0;210.0;10.0;230.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>500</x>
      <y>250</y>
      <w>370</w>
      <h>650</h>
    </coordinates>
    <panel_attributes>*waiting_to_advance*
--
entry /
  archer.yell(Event(
    signal=signals.Other_Ready_War_Cry,
    payload=archer.name))

  ready = True
  archer.snoop_scribbel("{} has {} arrows". \
    format(archer.name, archer.arrows)
  time_to_wait = random.randint(130,300)
  
  for name, other in archer.others.items():
    if other.dead() is not True:
      ready &amp;= other.waiting()
    else:
      archer.snoop_scribble(
        "{} thinks {} is dead".
        format(archer.name, name)
  if ready is False:      
    archer.snoop_scribble(
      "{} is impatient he will attack in {} seconds".
      format(archer.name, time_to_wait)
    archer.post_fifo(
      Event(
        signal=signals.Advance_War_Cry),
      times=1,
      period=random.randint(time_to_wait),
      deferred=True)
  else:
    archer.snoop_scribble(
      "{} thinks unit is ready to attack". \
      format(archer.name))
    archer.post_fifo(
      Event(signal=signals.Advance_War_Cry))
  
exit /
  archer.cancel_events(
    Event(signal=signals.Advance_War_Cry))
  

valign=top

fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>930</x>
      <y>200</y>
      <w>180</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=.
&lt;&lt;state pattern&gt;&gt;
Multichart Pend
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>920</x>
      <y>320</y>
      <w>240</w>
      <h>70</h>
    </coordinates>
    <panel_attributes># Outer state hook:
Other_Ready_War_Cry
  archer.dispatch_to_empathy(e)

style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1000</x>
      <y>250</y>
      <w>70</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>10.0;70.0;50.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>760</x>
      <y>240</y>
      <w>220</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>10.0;70.0;200.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>320</x>
      <y>490</y>
      <w>60</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Ready
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>950</x>
      <y>110</y>
      <w>120</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>empathies
symbol=substate</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>930</x>
      <y>60</y>
      <w>170</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>dispatch_to_empathy
dispatch_to_all_empathy</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>760</x>
      <y>250</y>
      <w>260</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>240.0;10.0;90.0;90.0;10.0;190.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1010</x>
      <y>170</y>
      <w>30</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>10.0;30.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
