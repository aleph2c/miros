[[subgoals.thread_safe_attributes|back]]
*Explain How thread safe attribute Work*
= Observer ([[local:C:/Vim8.1/.vim/ooda.pdf|diagram]]) = 
== Evidence ([[evidence.Explain_how_the_thing_works|evidence]]) ==

  *What defines Success?:* ([[subgoals.Explain_how_the_thing_works|subgoals]])
    "The best is the enemy of the good" - Voltaire
    
    A simple well written description of how to use the thread-safe attribute
    features of miros.  Explain why it should be used sparingly, and explain how
    to deal with difficult situations (where _locks are required).
    
    Place the way that it was designed into the examples folder.  It should be
    explained since there could be issues with it, if there are invite critique.

  *What is the problem?*
    They need to know why they would use it in the first place (race conditions)
    If they use the feature they will slow down their code.
    It breaks the spirit of why you would use a statechart in the first place.
    It uses weird syntax.
    It's still very useful, and if used sparingly will keep the code clean.
    There is an example of how to do things right (philosopher's problem), this
    could serve as a nice point to jump into the example, and another shout out
    to Miro Samek.
  
= Orient =
  *Symptoms:* [[symptoms.Explain_how_the_thing_works|symptoms]]

== Questions ==
  *Questions for Explain How thread safe attribute Work: >= 5*
    Can you think of anyway to speed up your feedback cycle?
    Do you have enough information?
    Is your information organized?
    Can you reproduce the problem?
    Can you simplify your test?
    Do you have something to baseline from?
    What recently changed?
    What don't you know that you need to know?
  
  *Assumptions*

= Decide =
  [[#Questions]]
  *Research Needed For?:*
    

  [[#Questions]]
  *Idea/Hypotheses for Explain How thread safe attribute Work: >=5*
  * [ ] 
  * [ ] 
  * [ ] 
  * [ ] 
  * [ ] 

  *Chosen Research-Goal/Hypothesis*
    

== Plan ([[plan.Explain_how_the_thing_works|plan]]) ==

= Act =
  

