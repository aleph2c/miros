[[subgoals.subgoals.thread_safe_attributes|back]]
*The Descriptor Protocol Is Not Working With Iadd*
= Observer ([[local:C:/Vim8.1/.vim/ooda.pdf|diagram]]) = 
== Evidence ([[evidence.The_descriptor_protocol_is_not_working_with_iadd|evidence]]) ==

  *What defines Success?:* ([[subgoals.The_descriptor_protocol_is_not_working_with_iadd|subgoals]])
    Use a Lock or Rlock within a data descriptor.  __iadd__ or whatever, should
    implicitly be locked without having to overload the non-atomic method.

  *What is the problem?*
    '+=' type operations are not atomic.  '+=' in python is managed by the
    '__iadd__' magic method.  I am trying to control the '.' operator using a
    descriptor protocol to make thread safe attributes.
    
    Identify a way to share a lock between the __get__ and __set__ functions in an
    object using the descriptor protocol
    
  *Discoveries:*
    Descriptors work in class space, you define named properties outside of
    __init__ or in any of the methods.  To make a descriptor, you can use the
    __get__, __set__, __del__ technique or the fget, fset, fdel and property
    technique, or you can use the property decorator.
    
    When defining a property, you create an inner attribute which is typically
    prepended with a '_' to indicate that it is private.  If you make this
    attribute using a class which has a '__iadd__' method, that method will be
    called if the outer property experienced a '+=' operation on it.
    Unfortunately, this call happens after the initial call to 'fget'.
    
    I am trying to have '__iadd__' called, and from within it fget and fset
    called, so that the whole operation can be run within a locking context
    manager.  If I could find a way to do this, I could meta-program the code for
    the user and they would have a convenient way of sharing attributes.
    
    Found a way to detect if a fget was being called non-atomically.
  
= Orient =
  *Symptoms:* [[symptoms.The_descriptor_protocol_is_not_working_with_iadd|symptoms]]

== Questions ==
  *Questions for The Descriptor Protocol Is Not Working With Iadd: >= 5*
    Are your resources organized so you can quickly find them?
    Can you reproduce the problem?
  
  *Assumptions*
    We need this feature
    We need to use the descriptor protocol
    We need to use RLocks [mayby Locks are good enough]

= Decide =
  [[#Questions]]
  *Research Needed For?:*

  [[#Questions]]
  *Idea/Hypotheses for The Descriptor Protocol Is Not Working With Iadd: >=5*
  * [ ] use a instance variable to build a lock in the NameInClassSpace1
  * [ ] change the fget to __get__ and fset to __set__
  * [ ] inherit NameInClassSpace1 into NameInClassSpace2
  * [ ] test against all non-atomic calls, +=, -= ... **=, etc.
  * [ ] clean code with use of a namedtuple to get previous stateframe
  * [ ] adding locking print statements
  * [ ] clean up the code so that it will be easy to read later

  *Chosen Research-Goal/Hypothesis*

== Plan ([[plan.The_descriptor_protocol_is_not_working_with_iadd|plan]]) ==

= Act =
  

