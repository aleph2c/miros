*The stop features are under-developed*
= Observe =
  
  *What defines Success?*
  * An individual activeobject can be destroyed:
    * its thread stops running
    * its queues are destroyed 
    * its memory can be garbage collected
    * a new version can be recreated later from main
  * The fabric can be destroyed:
    * all attached active objects are destroyed
    * all attached queue are destroyed
    * its memory can be garbage collected
    * a new version can be recreated later from main

  *What is the problem?*
 
  The active object module is complex, if you add bugs while adding this
  feature, you will harm many people's code bases.  Ensure all test pass before
  release.
  
  It doesn't look like this feature was prioritized before, but if you want to
  construct workers without making memory leaks, you will need this feature.
  
  The pytest module has added warnings, which mean you have to add a ini file in
  the top level directory.  This is annoying, but it could offer some added
  visibility into what was previously tested.
  
  I am not sure how to confirm if something is garbage collected in Python.
  
  The active fabric and the active objects seem to share the same threading
  Event.  This means to stop one active object is to stop all of them.  We do
  not want this behavior.
  
  *Evidence that contradicts Assumptions:*
  
  *Useful information:*
  To check the number of references to an object you can use the sys.getrefcount
  method (not trivial)
  
    import sys
    foo = []
    
    # 2 referenced, 1 from the foo var and 1 from getrefcount
    # print(sys.getrefcount(foo))
    
    def bar(a):
      # 4 references
      # from the foo var, function argument, getrefcount and Python's function
      # stack
      print(sys.getrefcount(a))
      
    bar(foo)
    # 2 references, the function scope is destroyed
    print(sys.getrefcount(foo))
  
= Orient =
  *Symptoms:*
  
  This feature wasn't priorized before.
  
  *Questions for 'The stop features are under-developed':*
    * Is there a way for the active fabric to see all of it's attached active objects? 
    * Is there a way to kill a task, and confirm it is done? (active fabric
      kill an active object task, waiting till it is dead, then kill the next
      one)
    * Is there a way to kill a queue?  Does this event make sense?
    

  *Assumptions:*
  We need to kill the active fabric (maybe we don't, this would simplify the design)

= Decide =
  *Idea/Hypotheses for The stop features are under-developed: >=5*
  * [X] Check the tests for stop features
  * [X] Get the tests passing
  * [X] Write the test marks into the pytest.ini file
  * [X] Read the code and see how the thread events are set up
  * [X] Research how to determine if something is garbage collected
        (conclusion... don't even bother, it's too complicated, it's a
        distraction)
  * [X] Create a plan for stopping an active object without harming the
        activefabric
  * [ ] Adjust the code
  * [ ] 
  * [ ] Add tests to confirm the activeobject stop feature is working
  * [ ] Add tests to confirm that the activefabric was unharmed
  * [ ] Add tests to confirm that the activeobject has been garbage collected
  * [ ] Add sensible docstrings under the stop feature
  * [ ] Write a recipe
  * [ ] Create a plan for stopping the active fabric and all attached activeobjects
  * [ ] Adjust the code
  * [ ] Add tests to confirm the activefabric stop feature is working
  * [ ] Add tests to confirm that the activefabric has been garbage collected
  * [ ] Add tests to confirm that all attached active objects have been garbage collected
  * [ ] Add sensible docstrings under the stop feature
  * [ ] Write a recipe
  *Chosen Idea/Hypothesis*
    
    Adjust the code
    
  *Plan to Expand-on-Idea/Disprove-Hypothesis*
  
  * ActiveFabricSource has a stop method.  It uses the ThreadEvent() singleton,
    clears it.  Then it calls the stop_thread function, which creates a
    stop_fabric event, which priority 1 and puts into the fifo_fabric_queue and
    the lifo_fabric_queue.  This wakes up the thread, so it can notice that the
    ThreadEvent() singleton has been cleared, causing the thread to stop.
    stop_thread joins on the thread obj, which means it will wait for it to
    exit.
    
  * ActiveObject has a stop method, which appears to stop everything if it is
    stopped, yet it also have a stop_fabric argument which is also called, this
    will stop the lifo_fabric_queue and the fifo_fabric_queue.  The method is
    currently broken.
    
    Does the activefabric know about all of the threads that are running with
    it? No
    
    1. activeobject: stop should set the task specific event to clear
    2. activeobject: task should check if singleton event is cleared, if so, it
                  should clear its own task specific event as well
    3. activeobject: upon ending its task, it should set its queue to None, so that
                  the fabric doesn't post it it anymore, then del
    4. activeobject: start, create a new queue with the correct size
    5. activeobject: stop should not be able to effect fabric, there is not need
                  for this feature
    
    6. fabric: only post to a queue it if exists (test this once you have
            refactored the work)... see lines 203 and 230
            
    7. everything you touch: add new docstrings.
    8. rerun tests
    
= Act =

