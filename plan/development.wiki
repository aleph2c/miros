*Development Plan*
= Observer ([[local:C:/Vim8.1/.vim/ooda.pdf|diagram]]) = 
== Evidence ([[evidence.development|evidence]]) ==

  *What defines Success?:* ([[subgoals.development|subgoals]])
  
    Book:
      * Re-write intro, this has to be good
      * have subclass add a catch to a state (see charger tester example for
        context), add to recipes and testing sections once you verified this
        works.
      * have subclass stop, change then start its superclass's statechart (see
        charger tester example for context), add to recipes and testing sections
        once you have verified this works.
      * Add orthogonal regions
      * Add over-lapping regions
      * Statechart to XML and back
      * XML/pickle injection into a sub-part of a chart
      * pattern: multichart race (multi-unit charger)
      * pattern: multichart pend (multi-unit charger)
      * edit: reflection (is it any good?), add logging/grep etc
      * write the testing section, using dependency injection and mocking
        (war-gaming this out in the multi-unit charger essay)
      * integrate with c (miros-rabbitmq)
      * write something about boiler plate code (customization?)
      * edit: glossary
      * integrate with systemd (miros-rabbitmq)
      * go over everything again and reduce it, grammar check it
      * finish random example
    
    Practical:
      * Build a set of training slides
      * Practice training (intro, and then deeper, aim for 10, and 45 minute
        sessions)
      * Provide boiler plate snippets to users so that don't have to deal with
        the tedium of the syntax
      * Provide a compressing shim to users, where they can pack the syntax with
        simple worker functions (I can't build better syntax because I have to
        be backward compatible)
      * Now that you have used it for a while, make a very simple naming
        standard for 
        * ActiveObjects
        * private-events
        * public-events
        * state-callbacks
        * normal-methods
      * Build training for OODA approach with statecharts
      * Figure out how to get paid/sponsored
        * Investigate business models which can make money
          * Lazy buttons
          * Training/Consultancy
      * Move some of the docs into the README.md files to advertise what is
        going on 
    
    Loonshots:
      Investigate:
        * a way of turning a Factory into XML (code-to-data add to patterns)
        * a way to turning XML back into a Factory (data-to-code add to
          patterns)
        * a way to inject an HSM within another HSM (add to patterns)
        * turn XML into SVG XML (code-to-data-to-diagram)
        * write something that can parse the AST
        * add genetic/search algorithms and have code that writes itself

    Marketing:
    
      Consider changing the package name to glial, 
      Describe how to use statecharts as a thing between other things, how to
      pull designs out of the dark.
      Ditch the current pydoc CSS, since it looks terrible on phones

  *What is the problem?*
    
  *Discoveries:* ([[notes.development|notes]])
  
= Orient =
  *Symptoms:* [[symptoms.development|symptoms]]

== Questions ==
  *Questions for Development Plan: >= 5*
    Can you think of anyway to speed up your feedback cycle?
    What are my constraints?
    Is your information organized?
    Do you have enough information?
    Can you reproduce the problem?
    Can you simplify your test?
    Do you have something to baseline from?
    What recently changed?
    What don't you know that you need to know?
  
  *Assumptions*

= Decide =
  [[#Questions]]
  *Research Needed For?:*

  [[#Questions]]
  *Idea/Hypotheses for Development Plan: >=5*
  * [ ] Scan the docs, mark down work which needs completing
  * [ ] 
  * [ ] 
  * [ ] 
  * [ ] 

  *Chosen Research-Goal/Hypothesis*
    

== Plan ([[plan.development|plan]]) ==

= Act =
  

